// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`linting base disallowed.js fixture matches snapshot 1`] = `
[
  {
    "column": 20,
    "endColumn": 37,
    "endLine": 1,
    "fix": {
      "range": [
        19,
        36,
      ],
      "text": "'child_process'",
    },
    "line": 1,
    "message": "Replace \`·'child_process'·\` with \`'child_process'\`",
    "messageId": "replace",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 9,
    "endColumn": 14,
    "endLine": 4,
    "fix": {
      "range": [
        85,
        90,
      ],
      "text": "lol",
    },
    "line": 4,
    "message": "Replace \`·lol·\` with \`lol\`",
    "messageId": "replace",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 9,
    "endColumn": 25,
    "endLine": 7,
    "fix": {
      "range": [
        162,
        178,
      ],
      "text": "indirectModule",
    },
    "line": 7,
    "message": "Replace \`·indirectModule·\` with \`indirectModule\`",
    "messageId": "replace",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 40,
    "endColumn": 45,
    "endLine": 9,
    "fix": {
      "range": [
        221,
        226,
      ],
      "text": "100",
    },
    "line": 9,
    "message": "Replace \`·100·\` with \`100\`",
    "messageId": "replace",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 1,
    "endColumn": 25,
    "endLine": 10,
    "line": 10,
    "message": "Found non-literal argument to RegExp Constructor",
    "nodeType": "NewExpression",
    "ruleId": "security/detect-non-literal-regexp",
    "severity": 1,
  },
  {
    "column": 12,
    "endColumn": 24,
    "endLine": 10,
    "fix": {
      "range": [
        240,
        252,
      ],
      "text": "dosPattern",
    },
    "line": 10,
    "message": "Replace \`·dosPattern·\` with \`dosPattern\`",
    "messageId": "replace",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 10,
    "endColumn": 11,
    "endLine": 12,
    "line": 12,
    "message": "Identifier name 'x' is too short (< 2).",
    "messageId": "tooShort",
    "nodeType": "Identifier",
    "ruleId": "id-length",
    "severity": 1,
  },
  {
    "column": 10,
    "endColumn": 11,
    "endLine": 12,
    "line": 12,
    "message": "'x' is defined but never used.",
    "messageId": "unusedVar",
    "nodeType": "Identifier",
    "ruleId": "no-unused-vars",
    "severity": 2,
  },
  {
    "column": 12,
    "endColumn": 15,
    "endLine": 12,
    "fix": {
      "range": [
        267,
        270,
      ],
      "text": "y",
    },
    "line": 12,
    "message": "Replace \`·y·\` with \`y\`",
    "messageId": "replace",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 13,
    "endColumn": 14,
    "endLine": 12,
    "line": 12,
    "message": "Identifier name 'y' is too short (< 2).",
    "messageId": "tooShort",
    "nodeType": "Identifier",
    "ruleId": "id-length",
    "severity": 1,
  },
  {
    "column": 13,
    "endColumn": 14,
    "endLine": 12,
    "line": 12,
    "message": "'y' is defined but never used.",
    "messageId": "unusedVar",
    "nodeType": "Identifier",
    "ruleId": "no-unused-vars",
    "severity": 2,
  },
  {
    "column": 9,
    "endColumn": 22,
    "endLine": 13,
    "line": 13,
    "message": "'xIsACoolParam' is not defined.",
    "messageId": "undef",
    "nodeType": "Identifier",
    "ruleId": "no-undef",
    "severity": 2,
  },
  {
    "column": 2,
    "endColumn": 3,
    "endLine": 14,
    "fix": {
      "range": [
        298,
        299,
      ],
      "text": "",
    },
    "line": 14,
    "message": "Delete \`;\`",
    "messageId": "delete",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 5,
    "endColumn": 11,
    "endLine": 16,
    "fix": {
      "range": [
        301,
        427,
      ],
      "text": "const things = {
	a: 13,
	cd: 99.99,
	e9: 6e99,
	f7: (  ) => ['x'],
	12: '32',
	ff: xx => xx,
	gg: ( {fds, }) =>
        fds,
};",
    },
    "line": 16,
    "message": "'things' is never reassigned. Use 'const' instead.",
    "messageId": "useConst",
    "nodeType": "Identifier",
    "ruleId": "prefer-const",
    "severity": 2,
  },
  {
    "column": 2,
    "endColumn": 3,
    "endLine": 17,
    "line": 17,
    "message": "Identifier name 'a' is too short (< 2).",
    "messageId": "tooShort",
    "nodeType": "Identifier",
    "ruleId": "id-length",
    "severity": 1,
  },
  {
    "column": 7,
    "endColumn": 9,
    "endLine": 20,
    "fix": {
      "range": [
        353,
        355,
      ],
      "text": "",
    },
    "line": 20,
    "message": "Delete \`··\`",
    "messageId": "delete",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 6,
    "endColumn": 8,
    "endLine": 22,
    "fix": {
      "range": [
        383,
        385,
      ],
      "text": "(xx)",
    },
    "line": 22,
    "message": "Replace \`xx\` with \`(xx)\`",
    "messageId": "replace",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 7,
    "endColumn": 8,
    "endLine": 24,
    "fix": {
      "range": [
        399,
        419,
      ],
      "text": "{ fds }) =>",
    },
    "line": 23,
    "message": "Replace \`·{fds,·})·=>⏎·······\` with \`{·fds·})·=>\`",
    "messageId": "replace",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 7,
    "endColumn": 45,
    "endLine": 28,
    "fix": {
      "range": [
        480,
        518,
      ],
      "text": "const thing of Object.keys(things)",
    },
    "line": 28,
    "message": "Replace \`·const·thing·of·Object.keys(·things·)·\` with \`const·thing·of·Object.keys(things)\`",
    "messageId": "replace",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 3,
    "endColumn": 33,
    "endLine": 29,
    "line": 29,
    "message": "Unexpected \`await\` inside a loop.",
    "messageId": "unexpectedAwait",
    "nodeType": "AwaitExpression",
    "ruleId": "no-await-in-loop",
    "severity": 2,
  },
  {
    "column": 25,
    "endColumn": 32,
    "endLine": 29,
    "fix": {
      "range": [
        546,
        553,
      ],
      "text": "thing",
    },
    "line": 29,
    "message": "Replace \`·thing·\` with \`thing\`",
    "messageId": "replace",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 2,
    "endColumn": 6,
    "endLine": 36,
    "line": 34,
    "message": "Avoid passing an async function to Array.prototype.forEach",
    "nodeType": "ExpressionStatement",
    "ruleId": "@automattic/wpvip/no-async-foreach",
    "severity": 2,
  },
  {
    "column": 14,
    "endColumn": 47,
    "endLine": 34,
    "fix": {
      "range": [
        628,
        661,
      ],
      "text": "things).forEach(async (thing",
    },
    "line": 34,
    "message": "Replace \`·things·).forEach(·async·(·thing·\` with \`things).forEach(async·(thing\`",
    "messageId": "replace",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 25,
    "endColumn": 32,
    "endLine": 35,
    "fix": {
      "range": [
        692,
        699,
      ],
      "text": "thing",
    },
    "line": 35,
    "message": "Replace \`·thing·\` with \`thing\`",
    "messageId": "replace",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 3,
    "endColumn": 4,
    "endLine": 36,
    "fix": {
      "range": [
        704,
        705,
      ],
      "text": "",
    },
    "line": 36,
    "message": "Delete \`·\`",
    "messageId": "delete",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 8,
    "endColumn": 11,
    "endLine": 40,
    "line": 40,
    "message": "'lol' is already declared in the upper scope on line 3 column 7.",
    "messageId": "noShadow",
    "nodeType": "Identifier",
    "ruleId": "no-shadow",
    "severity": 2,
  },
  {
    "column": 1,
    "endColumn": 12,
    "endLine": 44,
    "line": 44,
    "message": "'nonExistent' is not defined.",
    "messageId": "undef",
    "nodeType": "Identifier",
    "ruleId": "no-undef",
    "severity": 2,
  },
  {
    "column": 121,
    "fix": {
      "range": [
        906,
        906,
      ],
      "text": "
",
    },
    "line": 46,
    "message": "Newline required at end of file but not found.",
    "messageId": "missing",
    "nodeType": "Program",
    "ruleId": "eol-last",
    "severity": 2,
  },
  {
    "column": 121,
    "endColumn": 121,
    "endLine": 46,
    "fix": {
      "range": [
        906,
        906,
      ],
      "text": "
",
    },
    "line": 46,
    "message": "Insert \`⏎\`",
    "messageId": "insert",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
]
`;

exports[`linting cli disallowed.js fixture matches snapshot 1`] = `[]`;

exports[`linting prettier disallowed.js fixture matches snapshot 1`] = `
[
  {
    "column": 13,
    "endColumn": 18,
    "endLine": 5,
    "fix": {
      "range": [
        61,
        66,
      ],
      "text": "'x'",
    },
    "line": 5,
    "message": "Replace \`·'x'·\` with \`'x'\`",
    "messageId": "replace",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 6,
    "endColumn": 8,
    "endLine": 7,
    "fix": {
      "range": [
        85,
        87,
      ],
      "text": "(xx)",
    },
    "line": 7,
    "message": "Replace \`xx\` with \`(xx)\`",
    "messageId": "replace",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 7,
    "endColumn": 24,
    "endLine": 8,
    "fix": {
      "range": [
        101,
        118,
      ],
      "text": "{ fds }) => fds,",
    },
    "line": 8,
    "message": "Replace \`·{·fds·}·)·=>·fds\` with \`{·fds·})·=>·fds,\`",
    "messageId": "replace",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 6,
    "endColumn": 44,
    "endLine": 13,
    "fix": {
      "range": [
        146,
        184,
      ],
      "text": "const thing of Object.keys(things)",
    },
    "line": 13,
    "message": "Replace \`·const·thing·of·Object.keys(·things·)·\` with \`const·thing·of·Object.keys(things)\`",
    "messageId": "replace",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 1,
    "endColumn": 20,
    "endLine": 14,
    "fix": {
      "range": [
        188,
        207,
      ],
      "text": "	done.push(thing",
    },
    "line": 14,
    "message": "Replace \`··done.push(·thing·\` with \`↹done.push(thing\`",
    "messageId": "replace",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 1,
    "endColumn": 1,
    "endLine": 21,
    "fix": {
      "range": [
        242,
        243,
      ],
      "text": "",
    },
    "line": 20,
    "message": "Delete \`⏎\`",
    "messageId": "delete",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
]
`;

exports[`linting typescript disallowed.ts fixture matches snapshot 1`] = `
[
  {
    "column": 21,
    "endColumn": 62,
    "endLine": 1,
    "fix": {
      "range": [
        20,
        61,
      ],
      "text": "one: number, two: number, three: String",
    },
    "line": 1,
    "message": "Replace \`·one:·number,·two:·number,·three:·String·\` with \`one:·number,·two:·number,·three:·String\`",
    "messageId": "replace",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 48,
    "endColumn": 61,
    "endLine": 1,
    "line": 1,
    "message": "'three' is defined but never used. Allowed unused args must match /^_/u.",
    "messageId": "unusedVar",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/no-unused-vars",
    "severity": 2,
  },
  {
    "column": 55,
    "endColumn": 61,
    "endLine": 1,
    "fix": {
      "range": [
        54,
        60,
      ],
      "text": "string",
    },
    "line": 1,
    "message": "Don't use \`String\` as a type. Use string instead",
    "messageId": "bannedTypeMessage",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/ban-types",
    "severity": 2,
  },
  {
    "column": 1,
    "endColumn": 14,
    "endLine": 5,
    "line": 5,
    "message": "Do not use "@ts-ignore" because it alters compilation errors.",
    "messageId": "tsDirectiveComment",
    "nodeType": "Line",
    "ruleId": "@typescript-eslint/ban-ts-comment",
    "severity": 2,
  },
  {
    "column": 13,
    "endColumn": 18,
    "endLine": 10,
    "fix": {
      "range": [
        170,
        175,
      ],
      "text": "'x'",
    },
    "line": 10,
    "message": "Replace \`·'x'·\` with \`'x'\`",
    "messageId": "replace",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 7,
    "endColumn": 19,
    "endLine": 12,
    "fix": {
      "range": [
        195,
        207,
      ],
      "text": "xx: string",
    },
    "line": 12,
    "message": "Replace \`·xx:·string·\` with \`xx:·string\`",
    "messageId": "replace",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 7,
    "endColumn": 16,
    "endLine": 13,
    "fix": {
      "range": [
        222,
        231,
      ],
      "text": "{ fds }",
    },
    "line": 13,
    "message": "Replace \`·{·fds·}·\` with \`{·fds·}\`",
    "messageId": "replace",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 26,
    "endColumn": 49,
    "endLine": 16,
    "fix": {
      "range": [
        270,
        293,
      ],
      "text": "one: number, two: any",
    },
    "line": 16,
    "message": "Replace \`·one:·number,·two:·any·\` with \`one:·number,·two:·any\`",
    "messageId": "replace",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
  {
    "column": 45,
    "endColumn": 48,
    "endLine": 16,
    "line": 16,
    "message": "Unexpected any. Specify a different type.",
    "messageId": "unexpectedAny",
    "nodeType": "TSAnyKeyword",
    "ruleId": "@typescript-eslint/no-explicit-any",
    "severity": 1,
    "suggestions": [
      {
        "desc": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
        "fix": {
          "range": [
            289,
            292,
          ],
          "text": "unknown",
        },
        "messageId": "suggestUnknown",
      },
      {
        "desc": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
        "fix": {
          "range": [
            289,
            292,
          ],
          "text": "never",
        },
        "messageId": "suggestNever",
      },
    ],
  },
  {
    "column": 8,
    "endColumn": 11,
    "endLine": 21,
    "line": 21,
    "message": "'add' is already declared in the upper scope on line 1 column 17.",
    "messageId": "noShadow",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/no-shadow",
    "severity": 2,
  },
]
`;

exports[`linting typescript-strict disallowed.ts fixture matches snapshot 1`] = `
[
  {
    "column": 47,
    "endColumn": 60,
    "endLine": 1,
    "line": 1,
    "message": "'three' is defined but never used. Allowed unused args must match /^_/u.",
    "messageId": "unusedVar",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/no-unused-vars",
    "severity": 2,
  },
  {
    "column": 54,
    "endColumn": 60,
    "endLine": 1,
    "fix": {
      "range": [
        53,
        59,
      ],
      "text": "string",
    },
    "line": 1,
    "message": "Don't use \`String\` as a type. Use string instead",
    "messageId": "bannedTypeMessage",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/ban-types",
    "severity": 2,
  },
  {
    "column": 44,
    "endColumn": 47,
    "endLine": 5,
    "line": 5,
    "message": "Unexpected any. Specify a different type.",
    "messageId": "unexpectedAny",
    "nodeType": "TSAnyKeyword",
    "ruleId": "@typescript-eslint/no-explicit-any",
    "severity": 2,
    "suggestions": [
      {
        "desc": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
        "fix": {
          "range": [
            136,
            139,
          ],
          "text": "unknown",
        },
        "messageId": "suggestUnknown",
      },
      {
        "desc": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
        "fix": {
          "range": [
            136,
            139,
          ],
          "text": "never",
        },
        "messageId": "suggestNever",
      },
    ],
  },
  {
    "column": 1,
    "endColumn": 14,
    "endLine": 9,
    "line": 9,
    "message": "Do not use "@ts-ignore" because it alters compilation errors.",
    "messageId": "tsDirectiveComment",
    "nodeType": "Line",
    "ruleId": "@typescript-eslint/ban-ts-comment",
    "severity": 2,
  },
  {
    "column": 19,
    "endColumn": 22,
    "endLine": 17,
    "line": 17,
    "message": "Unsafe return of an \`any\` typed value.",
    "messageId": "unsafeReturn",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/no-unsafe-return",
    "severity": 2,
  },
  {
    "column": 7,
    "endColumn": 20,
    "endLine": 20,
    "line": 20,
    "message": "'outerScopeVar' is assigned a value but never used.",
    "messageId": "unusedVar",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/no-unused-vars",
    "severity": 2,
  },
  {
    "column": 10,
    "endColumn": 16,
    "endLine": 21,
    "line": 21,
    "message": "'shadow' is defined but never used.",
    "messageId": "unusedVar",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/no-unused-vars",
    "severity": 2,
  },
  {
    "column": 8,
    "endColumn": 21,
    "endLine": 22,
    "line": 22,
    "message": "'outerScopeVar' is already declared in the upper scope on line 20 column 7.",
    "messageId": "noShadow",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/no-shadow",
    "severity": 2,
  },
]
`;
