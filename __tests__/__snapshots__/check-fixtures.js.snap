// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`linting javascript.js fixture matches snapshot 1`] = `
[
  {
    "column": 1,
    "endColumn": 58,
    "endLine": 1,
    "fix": {
      "range": [
        57,
        57,
      ],
      "text": "
",
    },
    "line": 1,
    "message": "There should be at least one empty line between import groups",
    "nodeType": "ImportDeclaration",
    "ruleId": "import/order",
    "severity": 2,
  },
  {
    "column": 10,
    "endColumn": 25,
    "endLine": 1,
    "fix": {
      "range": [
        0,
        58,
      ],
      "text": "",
    },
    "line": 1,
    "message": "'unusedEs6Import' is defined but never used.",
    "messageId": "unusedVar",
    "nodeType": "Identifier",
    "ruleId": "unused-imports/no-unused-imports",
    "severity": 1,
  },
  {
    "column": 10,
    "endColumn": 25,
    "endLine": 1,
    "line": 1,
    "message": "'unusedEs6Import' is defined but never used.",
    "messageId": "unusedVar",
    "nodeType": "Identifier",
    "ruleId": "no-unused-vars",
    "severity": 2,
  },
  {
    "column": 1,
    "endColumn": 38,
    "endLine": 2,
    "fix": {
      "range": [
        0,
        96,
      ],
      "text": "import { Buffer } from 'node:buffer';
import { unusedEs6Import } from './stub/unusedEs6Import';
",
    },
    "line": 2,
    "message": "\`node:buffer\` import should occur before import of \`./stub/unusedEs6Import\`",
    "nodeType": "ImportDeclaration",
    "ruleId": "import/order",
    "severity": 2,
  },
  {
    "column": 1,
    "endColumn": 25,
    "endLine": 13,
    "line": 13,
    "message": "Found non-literal argument to RegExp Constructor",
    "nodeType": "NewExpression",
    "ruleId": "security/detect-non-literal-regexp",
    "severity": 1,
  },
  {
    "column": 10,
    "endColumn": 11,
    "endLine": 15,
    "line": 15,
    "message": "Identifier name 'x' is too short (< 2).",
    "messageId": "tooShort",
    "nodeType": "Identifier",
    "ruleId": "id-length",
    "severity": 1,
  },
  {
    "column": 13,
    "endColumn": 14,
    "endLine": 15,
    "line": 15,
    "message": "Identifier name 'y' is too short (< 2).",
    "messageId": "tooShort",
    "nodeType": "Identifier",
    "ruleId": "id-length",
    "severity": 1,
  },
  {
    "column": 13,
    "endColumn": 14,
    "endLine": 15,
    "line": 15,
    "message": "'y' is defined but never used. Allowed unused args must match /^_/u.",
    "messageId": "unusedVar",
    "nodeType": "Identifier",
    "ruleId": "no-unused-vars",
    "severity": 2,
  },
  {
    "column": 9,
    "endColumn": 22,
    "endLine": 16,
    "line": 16,
    "message": "'xIsACoolParam' is not defined.",
    "messageId": "undef",
    "nodeType": "Identifier",
    "ruleId": "no-undef",
    "severity": 2,
  },
  {
    "column": 5,
    "endColumn": 11,
    "endLine": 19,
    "fix": {
      "range": [
        397,
        516,
      ],
      "text": "const things = {
	a: 13,
	cd: 99.99,
	e9: 6e99,
	f7: () => [ 'x' ],
	12: '32',
	ff: xx => xx,
	gg: ( { fds } ) => fds,
};",
    },
    "line": 19,
    "message": "'things' is never reassigned. Use 'const' instead.",
    "messageId": "useConst",
    "nodeType": "Identifier",
    "ruleId": "prefer-const",
    "severity": 2,
  },
  {
    "column": 2,
    "endColumn": 3,
    "endLine": 20,
    "line": 20,
    "message": "Identifier name 'a' is too short (< 2).",
    "messageId": "tooShort",
    "nodeType": "Identifier",
    "ruleId": "id-length",
    "severity": 1,
  },
  {
    "column": 3,
    "endColumn": 33,
    "endLine": 31,
    "line": 31,
    "message": "Unexpected \`await\` inside a loop.",
    "messageId": "unexpectedAwait",
    "nodeType": "AwaitExpression",
    "ruleId": "no-await-in-loop",
    "severity": 2,
  },
  {
    "column": 2,
    "endColumn": 6,
    "endLine": 38,
    "line": 36,
    "message": "Avoid passing an async function to Array.prototype.forEach",
    "nodeType": "ExpressionStatement",
    "ruleId": "@automattic/wpvip/no-async-foreach",
    "severity": 2,
  },
  {
    "column": 8,
    "endColumn": 11,
    "endLine": 42,
    "line": 42,
    "message": "'lol' is already declared in the upper scope on line 6 column 7.",
    "messageId": "noShadow",
    "nodeType": "Identifier",
    "ruleId": "no-shadow",
    "severity": 2,
  },
  {
    "column": 26,
    "endColumn": 36,
    "endLine": 47,
    "fix": {
      "range": [
        923,
        933,
      ],
      "text": "Boolean('heyyy')",
    },
    "line": 47,
    "message": "use \`Boolean('heyyy')\` instead.",
    "messageId": "useRecommendation",
    "nodeType": "UnaryExpression",
    "ruleId": "no-implicit-coercion",
    "severity": 2,
  },
  {
    "column": 1,
    "endColumn": 12,
    "endLine": 49,
    "line": 49,
    "message": "'nonExistent' is not defined.",
    "messageId": "undef",
    "nodeType": "Identifier",
    "ruleId": "no-undef",
    "severity": 2,
  },
  {
    "column": 46,
    "endColumn": 48,
    "endLine": 55,
    "line": 55,
    "message": "Unexpected comparison to newly constructed object. These two values can never be equal.",
    "messageId": "alwaysNew",
    "nodeType": "ObjectExpression",
    "ruleId": "no-constant-binary-expression",
    "severity": 2,
  },
]
`;

exports[`linting javascript-missing-eol.js fixture matches snapshot 1`] = `
[
  {
    "column": 51,
    "endColumn": 51,
    "endLine": 3,
    "fix": {
      "range": [
        270,
        270,
      ],
      "text": "
",
    },
    "line": 3,
    "message": "Insert \`⏎\`",
    "messageId": "insert",
    "nodeType": null,
    "ruleId": "prettier/prettier",
    "severity": 2,
  },
]
`;

exports[`linting typescript.ts fixture matches snapshot 1`] = `
[
  {
    "column": 1,
    "endColumn": 58,
    "endLine": 1,
    "fix": {
      "range": [
        57,
        57,
      ],
      "text": "
",
    },
    "line": 1,
    "message": "There should be at least one empty line between import groups",
    "nodeType": "ImportDeclaration",
    "ruleId": "import/order",
    "severity": 2,
  },
  {
    "column": 10,
    "endColumn": 25,
    "endLine": 1,
    "line": 1,
    "message": "'unusedEs6Import' is defined but never used.",
    "messageId": "unusedVar",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/no-unused-vars",
    "severity": 2,
  },
  {
    "column": 10,
    "endColumn": 25,
    "endLine": 1,
    "fix": {
      "range": [
        0,
        58,
      ],
      "text": "",
    },
    "line": 1,
    "message": "'unusedEs6Import' is defined but never used.",
    "messageId": "unusedVar",
    "nodeType": "Identifier",
    "ruleId": "unused-imports/no-unused-imports",
    "severity": 1,
  },
  {
    "column": 1,
    "endColumn": 38,
    "endLine": 2,
    "fix": {
      "range": [
        0,
        96,
      ],
      "text": "import { Buffer } from 'node:buffer';
import { unusedEs6Import } from './stub/unusedEs6Import';
",
    },
    "line": 2,
    "message": "\`node:buffer\` import should occur before import of \`./stub/unusedEs6Import\`",
    "nodeType": "ImportDeclaration",
    "ruleId": "import/order",
    "severity": 2,
  },
  {
    "column": 48,
    "endColumn": 61,
    "endLine": 4,
    "line": 4,
    "message": "'three' is defined but never used. Allowed unused args must match /^_/u.",
    "messageId": "unusedVar",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/no-unused-vars",
    "severity": 2,
  },
  {
    "column": 55,
    "endColumn": 61,
    "endLine": 4,
    "fix": {
      "range": [
        151,
        157,
      ],
      "text": "string",
    },
    "line": 4,
    "message": "Don't use \`String\` as a type. Use string instead",
    "messageId": "bannedTypeMessage",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/ban-types",
    "severity": 2,
  },
  {
    "column": 1,
    "endColumn": 14,
    "endLine": 8,
    "line": 8,
    "message": "Use "@ts-expect-error" instead of "@ts-ignore", as "@ts-ignore" will do nothing if the following line is error-free.",
    "messageId": "tsIgnoreInsteadOfExpectError",
    "nodeType": "Line",
    "ruleId": "@typescript-eslint/ban-ts-comment",
    "severity": 2,
    "suggestions": [
      {
        "desc": "Replace "@ts-ignore" with "@ts-expect-error".",
        "fix": {
          "range": [
            192,
            205,
          ],
          "text": "// @ts-expect-error",
        },
        "messageId": "replaceTsIgnoreWithTsExpectError",
      },
    ],
  },
  {
    "column": 1,
    "endColumn": 14,
    "endLine": 8,
    "fix": {
      "range": [
        192,
        205,
      ],
      "text": "// @ts-expect-error",
    },
    "line": 8,
    "message": "Use "@ts-expect-error" to ensure an error is actually being suppressed.",
    "messageId": "preferExpectErrorComment",
    "nodeType": "Line",
    "ruleId": "@typescript-eslint/prefer-ts-expect-error",
    "severity": 2,
  },
  {
    "column": 21,
    "endColumn": 24,
    "endLine": 16,
    "line": 16,
    "message": "Unsafe return of an \`any\` typed value.",
    "messageId": "unsafeReturn",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/no-unsafe-return",
    "severity": 2,
  },
  {
    "column": 45,
    "endColumn": 48,
    "endLine": 19,
    "line": 19,
    "message": "Unexpected any. Specify a different type.",
    "messageId": "unexpectedAny",
    "nodeType": "TSAnyKeyword",
    "ruleId": "@typescript-eslint/no-explicit-any",
    "severity": 2,
    "suggestions": [
      {
        "desc": "Use \`unknown\` instead, this will force you to explicitly, and safely assert the type is correct.",
        "fix": {
          "range": [
            386,
            389,
          ],
          "text": "unknown",
        },
        "messageId": "suggestUnknown",
      },
      {
        "desc": "Use \`never\` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",
        "fix": {
          "range": [
            386,
            389,
          ],
          "text": "never",
        },
        "messageId": "suggestNever",
      },
    ],
  },
  {
    "column": 8,
    "endColumn": 11,
    "endLine": 24,
    "line": 24,
    "message": "'add' is already declared in the upper scope on line 4 column 17.",
    "messageId": "noShadow",
    "nodeType": "Identifier",
    "ruleId": "@typescript-eslint/no-shadow",
    "severity": 2,
  },
]
`;
